---
format: 
  html:
    toc: true
    html-math-method: mathjax
vignette: >
  %\VignetteIndexEntry{documentation}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.align = "center",
  fig.width = 5, 
  fig.height=4
)
```


## Table of Contents {#toc}

1. [Introduction](#intro)
2. [Quick Start](#start)
3. [Refining the Details](#details)
    a. [find_local_factors()](#flf)
    b. [test_local_factors()](#tlf)
  

## Introduction {#intro}

```{r setup}
library(l1rotation)
```

The `l1rotation` package offers functionality to estimate the loadings matrix in factor models based on the l1-rotation criterion following [Freyaldenhoven (2025)](https://simonfreyaldenhoven.github.io/papers/factor_rotation.pdf). The key idea of this estimator is assuming a sparsity pattern in the loadings matrix solves the problem of rotational indeterminacy inherent to factor models. 

Factor models take the form 

$$
X = F \Lambda^{*T} + e
$$
where 

- $X$ is a $T \times n$ data matrix, where there are $T$ rows and $n$ variables, or columns

- $F$ is a $T \times r$ matrix of $r$ factors that the data is decomposed into

- $\Lambda^{*T}$ is an $r \times n$ matrix of true loadings

- $e$ is a $T \times n$ error matrix.

This package is designed to identify and estimate $\Lambda^{*}$ subject to additional sparsity assumptions detailed in [Freyaldenhoven (2025)](https://simonfreyaldenhoven.github.io/papers/factor_rotation.pdf).

## Quick start {#start}

We will use the `example_data` data that ships with the package to show its basic functionality. This data is a matrix containing numeric information with $n = 224$, $T = 207$. In general, data.frames, tibbles, or other data types can also be used with `l1rotation` functions, as long as all columns are numeric. Note also that the package cannot handle missing values in the data matrix. 

To start, let's look at the first seven columns of the example data:

```{r}
head(example_data[,1:7])
```

We assume that the number of underlying factors can be learned from the data (following the procedure in [Bai and Ng (2002)](https://onlinelibrary.wiley.com/doi/epdf/10.1111/1468-0262.00273)). For the `example_data` we will use two factors. With just the data, $X$, and the number of factors, $r$, we can start estimating the loadings with `local_factors()`. This function estimates $\Lambda^{*}$ and provides helpful diagnostics and figures. 

Below is an example using `example_data` (note that estimation can also be run in parallel with a selected number of cores, `n_cores`):

```{r}
set.seed(916)

lf <- local_factors(
  X = example_data, r = 2,
  parallel = FALSE, n_cores = NULL # Runs non-parallel by default
)

```

In the estimation, `local_factors()` has reasonable defaults set so the only required arguments are the data you're decomposing and the number of factors. We use the principal components estimator as the initial estimate of the loadings, $\Lambda_0$, which can be accessed via the `Lambda0` item of the output. The function also computes a quick diagnostic to check whether local factors are present in the data which is given in the output item `has_local_factors`.

Additionally, there are several rotation diagnostics accessible via `rotation_diagnostics` which give the rotation matrix, $R$ that when multiplied by $\Lambda_0$ produces $\hat{\Lambda}^*$, the value of the l1 norm for each vector, and the frequency that each solution appears in the initial grid of estimates.

```{r}
lf$rotation_diagnostics
```
For a visual interpretation of this rotation, we provide tile plots contrasting the initial estimate $\Lambda_0$, `pc_plot` and the rotated estimate, $\hat{\Lambda}^*$, `rotated_plot`.

```{r}
lf$pc_plot
```

In the initial principal component estimate, recall that each factor is simply a principal component. Of the 207 variables in $X$, the first factor loads negatively along the variables between 90 and 120, and slightly negatively almost everywhere else. Along the second factor, there are positive loadings between variables 125 and 200 and slightly negative loadings elsewhere. However, it may be difficult to interpret the relationship between variables and factors when all loadings are nonzero. 

```{r}
lf$rotated_plot
```


The second estimate is a rotated version of the principal components estimator optimized for sparsity. It will rotate each vector of the principal components loadings matrix until it finds a set of factors that are as sparse as possible. As we can see, the second plot may provide a stronger interpretation as variables 90-200 load negatively on the first factor while variables 0-120 load negatively on the second factor. The loadings along the other variables are close to zero, suggesting no relationship. With this rotation, we can more easily identify which sets of variables are related to which latent factors due to the revealed sparsity pattern.


## Refining the details {#details}

`l1rotation` supplies two additional functions, `find_local_factors()` and `test_local_factors()` which provide additional functionality to support the main `local_factors()` function.  


### `find_local_factors()` {#flf}

This function has an additional argument, `Lambda0`, that allows the user to specify any orthonormal basis of the loadings rather than defaulting to the principal component estimator.  Here are some plausible alternative initial estimates:

- MLE estimation

- Sparse Orthogonal Factor Regression (SOFAR) as in [Uematsu et al. (2019)](http://faculty.marshall.usc.edu/yingying-fan/publications/IEEEIT-UFCLL19.pdf).

### `test_local_factors()` {#tlf}


This function tests for the presence of local factors given an estimate of the loadings matrix, `Lambda`. Since the results in this package rely upon a sparsity pattern in the true loadings matrix, `test_local_factors()` provides a simple diagnostic to check this assumption. 

For a given loading matrix estimate, $\hat{\Lambda}$, we can consider maximizing across factors the number of individual loadings in $\hat{\Lambda}$ smaller than some threshold $h_n$. This gives us an idea of how many "small" loadings there are in $\hat{\Lambda}$: 

$$
\mathcal{L(\hat{\Lambda})} = \max_k\left(\sum_{i=1}^n 1\{\hat{|\lambda}_{ik}| < h_n \}\right)
$$
With this number, we can then check whether the number of "small" loadings is larger than $\gamma n$

$$
\text{has_local_factors} = 1\{\mathcal{L}(\hat{\Lambda})  \geq \gamma n \}.
$$

Returning to our `lf` results, we can take a look at the value of `has_local_factors`. 

```{r}
lf$has_local_factors
```

This value is the result of `test_local_factors()`. To verify, we can call `test_local_factors()` on two different estimates: the principal components estimate, `Lambda0`, and the l1rotation estimate, `Lambda`. 

```{r}
# Check for local factors in PC estimate...
test_pc_estimate <- test_local_factors(X = example_data, r = 2, loadings = lf$initial_loadings)

# And rotated estimate
test_rot_estimate <- test_local_factors(X = example_data, r = 2, loadings = lf$rotated_loadings)

test_pc_estimate$has_local_factors
test_rot_estimate$has_local_factors
```

This confirms that no local factors are detected in the principal components estimate (no sparsity pattern is observed), and that local factors are present in the rotated estimate. 

* Note that rotating the initial estimate, optimizing for sparsity, is not guaranteed to produce a sparse loadings matrix if the true loadings matrix itself is not sparse. However, if a sparsity pattern does exist in the true loadings matrix, this procedure will recover it.


```{r}
round_hn <- round(test_rot_estimate$h_n, digits = 3)

lf$small_loadings_plot + 
  ggplot2::labs(
    title = 'Number of "small" loadings per factor', 
    caption = paste('"Small" is defined as loadings less than', round_hn)
  )
```

Finally, given the testing plot above, we can conclude that factors 1 and 2 are likely local since they have enough "small" loadings (i.e., smaller than a value of $h_n = 1/\log(n) =$ `r round_hn` in the `example_data`).

